import json
import os
import sys
import io
import csv
import folium
from PyQt5.QtWidgets import QMainWindow, QTableWidget, QTableWidgetItem, QHeaderView
from PyQt5 import QtWidgets, QtWebEngineWidgets


class Window(QMainWindow):
    def __init__(self):
        super().__init__()

        # self.sourceLabel = QLabel(self)
        # self.source = QComboBox(self)
        # self.destinationLabel = QLabel(self)
        # self.destination = QComboBox(self)

        # Set PyQt window size
        self.title = "MAP PROJECT"
        self.left = 200
        self.top = 100
        self.width = 1800
        self.height = 950

        self.initWindow()

    def initWindow(self):
        # set window title
        self.setWindowTitle(self.title)
        # set window geometry
        # self.setGeometry(self.left, self.top, self.width, self.height)
        # Disable PyQt 5 application from resizing
        self.setFixedSize(self.width, self.height)

        # self.buttonUI()
        # self.dropDownUI()
        self.guiSettings()

        self.show()

    def guiSettings(self):
        # Create button
        shortPathButton = QtWidgets.QPushButton(self.tr("Find shortest path"))
        button2 = QtWidgets.QPushButton(self.tr("Another path"))
        button3 = QtWidgets.QPushButton(self.tr("Another path"))
        shortPathButton.setFixedSize(150, 50)
        button2.setFixedSize(150, 50)
        button3.setFixedSize(150, 50)

        with open('exportBuildings.geojson') as access_json:
            read_content = json.load(access_json)

        feature_access = read_content['features']
#######################################################################################################################

        # Create drop drown List (source)
        sourceLabel = QtWidgets.QLabel()
        sourceLabel.setText("Please select the Source location")
        sourceLabel.setFixedSize(200, 30)

        sourceDDL = QtWidgets.QComboBox()
        for feature_data in feature_access:
            buildingName = feature_data['properties']
            if 'name' in buildingName:
                retrieveHDB = buildingName['name']
                sourceDDL.addItem(retrieveHDB)
            elif 'addr:housename' in buildingName and 'addr:housenumber' in buildingName:
                retrieveName = buildingName['addr:housename'] + " " + buildingName['addr:housenumber']
                sourceDDL.addItem(retrieveName)
        sourceDDL.setFixedSize(180, 70)

        # Create drop down list (destination)
        destinationLabel = QtWidgets.QLabel()
        destinationLabel.setText("Please select the Destination location")
        destinationLabel.setFixedSize(200, 30)

        destinationDDL = QtWidgets.QComboBox()
        for feature_data in feature_access:
            buildingName = feature_data['properties']
            if 'name' in buildingName:
                retrieveHDB = buildingName['name']
                destinationDDL.addItem(retrieveHDB)
            elif 'addr:housename' in buildingName and 'addr:housenumber' in buildingName:
                retrieveName = buildingName['addr:housename'] + " " + buildingName['addr:housenumber']
                destinationDDL.addItem(retrieveName)
        destinationDDL.setFixedSize(180, 70)
#######################################################################################################################
        # Create table
        tableWidget= QTableWidget()

        tableWidget.setRowCount(5)
        tableWidget.setColumnCount(3)

        tableWidget.setItem(0, 0, QTableWidgetItem("Source"))
        tableWidget.setItem(0, 1, QTableWidgetItem("Destination"))
        tableWidget.setItem(0, 2, QTableWidgetItem("Distance"))

        tableWidget.setFixedSize(800, 175)
        tableWidget.setContentsMargins(10, 0, 10, 0)

        tableWidget.horizontalHeader().setStretchLastSection(True)
        tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        # Set columns to read only, no editing
        tableWidget.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
#######################################################################################################################
        self.view = QtWebEngineWidgets.QWebEngineView()
        # set margin for the map (left, top, right, down)
        self.view.setContentsMargins(10, 10, 10, 5)

        # Creating Folium Map
        m = folium.Map(location=[1.400150, 103.910172], titles="Punggol", zoom_start=17)
        nodeData = os.path.join('exportFULL.geojson')
        folium.GeoJson(nodeData).add_to(m)
        data = io.BytesIO()
        m.save(data, close_file=False)
        self.view.setHtml(data.getvalue().decode())

        # PyQt Horizontal Box layout
        central_widget = QtWidgets.QWidget()
        self.setCentralWidget(central_widget)
        lay = QtWidgets.QHBoxLayout(central_widget)

        # Create vertical layout container to contains all buttons, label, combobox, etc.
        controller_container = QtWidgets.QWidget()
        vlay = QtWidgets.QVBoxLayout(controller_container)
        vlay.setSpacing(10)
        vlay.addStretch()
        vlay.addWidget(sourceLabel)
        vlay.addWidget(sourceDDL)
        vlay.addWidget(destinationLabel)
        vlay.addWidget(destinationDDL)
        vlay.addStretch()
        vlay.addWidget(shortPathButton)
        vlay.addWidget(button2)
        vlay.addWidget(button3)
        vlay.addStretch()

        # Create vertical layout container to contain map and table
        map_container = QtWidgets.QWidget()
        vlay = QtWidgets.QVBoxLayout(map_container)
        vlay.addWidget(self.view, stretch=1)
        vlay.addWidget(tableWidget)

        lay.addWidget(controller_container)
        lay.addWidget(map_container)


if __name__ == "__main__":
    App = QtWidgets.QApplication(sys.argv)
    window = Window()
    sys.exit(App.exec())
