import io
import json
import os
import sys

import folium
from PyQt5 import QtWidgets, QtWebEngineWidgets, QtGui
from PyQt5.QtWidgets import QMainWindow


class Window(QMainWindow):
    def __init__(self):
        super().__init__()

        # self.sourceLabel = QLabel(self)
        # self.source = QComboBox(self)
        # self.destinationLabel = QLabel(self)
        # self.destination = QComboBox(self)

        # Set PyQt window size
        self.title = "Group P2-6 ICT 1008 PROJECT"
        self.left = 200
        self.top = 100
        self.width = 1800
        self.height = 950

        self.initWindow()

    def initWindow(self):
        # set window title
        self.setWindowTitle(self.title)
        # set window geometry
        # self.setGeometry(self.left, self.top, self.width, self.height)
        # Disable PyQt 5 application from resizing
        self.setFixedSize(self.width, self.height)

        self.guiSettings()

        self.show()

    def guiSettings(self):
        # Create button
        pathLabel = QtWidgets.QLabel()
        pathLabel.setText("Select Paths:")
        pathLabel.setFont(QtGui.QFont("Arial", 11, QtGui.QFont.Bold))
        pathLabel.setFixedSize(200, 30)

        walkingPathButton = QtWidgets.QPushButton(self.tr("Walking Path"))
        walkingPathButton.setFont(QtGui.QFont("Arial", 13, QtGui.QFont.Bold))
        walkingPathButton.setFixedSize(150, 50)

        drivingPathButton = QtWidgets.QPushButton(self.tr("Driving path"))
        drivingPathButton.setFont(QtGui.QFont("Arial", 13, QtGui.QFont.Bold))
        drivingPathButton.setFixedSize(150, 50)

        fastestPathButton = QtWidgets.QPushButton(self.tr("Fastest path"))
        fastestPathButton.setFont(QtGui.QFont("Arial", 13, QtGui.QFont.Bold))
        fastestPathButton.setFixedSize(150, 50)


        with open('exportBuilding.geojson') as access_json:
            read_content = json.load(access_json)

        feature_access = read_content['features']
        """for feature_data in feature_access:
            property_data = feature_data['properties']
            print(property_data)"""

#######################################################################################################################

        # Create drop drown List (source)
        sourceLabel = QtWidgets.QLabel()
        sourceLabel.setText("Select Source location")
        sourceLabel.setFont(QtGui.QFont("Arial", 11, QtGui.QFont.Bold))
        sourceLabel.setFixedSize(200, 30)

        sourceDDL = QtWidgets.QComboBox()
        # Set font size
        font = sourceDDL.font()
        font.setPointSize(13)
        sourceDDL.setFont(font)
        # Retrieve names from json file
        for feature_data in feature_access:
            buildingName = feature_data['properties']
            if 'name' in buildingName:
                retrieveHDB = buildingName['name']
                sourceDDL.addItem(retrieveHDB)
        sourceDDL.setFixedSize(180, 70)

        # Create drop down list (destination)
        destinationLabel = QtWidgets.QLabel()
        destinationLabel.setText("Select Destination location")
        destinationLabel.setFont(QtGui.QFont("Arial", 11, QtGui.QFont.Bold))
        destinationLabel.setFixedSize(200, 30)

        destinationDDL = QtWidgets.QComboBox()
        # Set font size
        font = destinationDDL.font()
        font.setPointSize(13)
        destinationDDL.setFont(font)
        # Retrieve names from json file
        for feature_data in feature_access:
            buildingName = feature_data['properties']
            if 'name' in buildingName:
                retrieveHDB = buildingName['name']
                destinationDDL.addItem(retrieveHDB)
        destinationDDL.setFixedSize(180, 70)

#######################################################################################################################

        """# Create Checkbox
        showBuilding = QtWidgets.QCheckBox("Buildings")
        showBuilding.setFont(QtGui.QFont("Arial", 15, QtGui.QFont.Bold))

        showRoad = QtWidgets.QCheckBox("Roads")
        showRoad.setFont(QtGui.QFont("Arial", 15, QtGui.QFont.Bold))"""

#######################################################################################################################

        self.view = QtWebEngineWidgets.QWebEngineView()
        # set margin for the map (left, top, right, down)
        self.view.setContentsMargins(5, 10, 10, 5)

        # Creating Folium Map
        m = folium.Map(location=[1.400150, 103.910172], titles="Punggol", zoom_start=17)
        nodeData = os.path.join('exportBuilding.geojson')

        geo_json = folium.GeoJson(nodeData, popup=folium.GeoJsonPopup(fields=['name']))
        geo_json.add_to(m)
        data = io.BytesIO()
        m.save(data, close_file=False)
        self.view.setHtml(data.getvalue().decode())

        # PyQt Horizontal Box layout
        central_widget = QtWidgets.QWidget()
        self.setCentralWidget(central_widget)
        lay = QtWidgets.QHBoxLayout(central_widget)

        # Create vertical layout container to contains all buttons, label, combobox, etc.
        controller_container = QtWidgets.QWidget()
        vlay = QtWidgets.QVBoxLayout(controller_container)
        vlay.setSpacing(10)
        vlay.addStretch()
        vlay.addWidget(sourceLabel)
        vlay.addWidget(sourceDDL)
        vlay.addWidget(destinationLabel)
        vlay.addWidget(destinationDDL)
        vlay.addStretch()
        vlay.addWidget(pathLabel)
        vlay.addWidget(walkingPathButton)
        vlay.addWidget(drivingPathButton)
        vlay.addWidget(fastestPathButton)
        vlay.addStretch()

        """checkbox_container = QtWidgets.QWidget()
        checklay = QtWidgets.QHBoxLayout(checkbox_container)
        checklay.addWidget(showBuilding)
        checklay.addWidget(showRoad)"""

        # Create vertical layout container to contain map and table
        map_container = QtWidgets.QWidget()
        vlay = QtWidgets.QVBoxLayout(map_container)
        # vlay.addWidget(checkbox_container)
        vlay.addWidget(self.view, stretch=1)

        lay.addWidget(controller_container)
        lay.addWidget(map_container)


if __name__ == "__main__":
    App = QtWidgets.QApplication(sys.argv)
    window = Window()
    sys.exit(App.exec())
